package main

import (
	"fmt"
	"strconv"
	"time"
	"gopkg.in/mgo.v2/bson"
	GModel "common/gomodule"
	"modules/configmodel"
	"common/tokenmanager"
	"modules/dbmodel"
	// "common/stringtools"
	"common/filetools"
	"common/httpclienttools"
	"common/httpservertools"
	"net/url"
	"net/http"
//	"io/ioutil"
	"errors"
	"strings"
	"path"
	"path/filepath"
	"runtime"
	"regexp"
	"github.com/satori/go.uuid"
)


func TestRun( ){
	
}

// url正则测试
func regTest( ){
	requestUrl := "/fsapi/upload/f5394eef-e576-4709-9e4b-a7c231bd34a4"
	re := regexp.MustCompile("/fsapi/upload/("+`[\S]+`+")")
	if subMatch := re.FindSubmatch([]byte(requestUrl)); subMatch != nil {
		if string(subMatch[0]) == requestUrl {
			for _, temp := range subMatch{
				fmt.Println(string(temp))
			}
		}
	}
	fmt.Println(regexp.MatchString("/fsapi/upload/"+`[\S]+`, requestUrl))
}
// Token管理器测试
func TokenManager_Test( ){
	type FileBatchOperationTokenObject struct{
		CountIndex		int64
		ErrorString		string
		Src				string
		Dst				string
		IsSrcExist		bool
		IsDstExist		bool
		IsReplace		bool
		IsReplaceAll	bool
		IsIgnore		bool
		IsIgnoreAll		bool
		IsComplete		bool
		IsDiscontinue	bool
	}
	TokenManager := tokenmanager.TokenManager{}
	TokenManager.Init( )
	go func(){for{
		token := TokenManager.AskToken(&tokenmanager.TokenObject{Second: 60, TypeStr:"test", TokenBody: FileBatchOperationTokenObject{}})
		fmt.Println(token)
		/*res, ok := TokenManager.GetTokenInfo(token)
		fmt.Println(ok, res)*/
		runtime.Gosched( )
		time.Sleep(time.Duration(100)*time.Millisecond)
	}
	}()
	fmt.Printf("pause!");var sc string;fmt.Scan(&sc)
}
// uuid生成和校验
func Uuid_Test( ){
	u1, err := uuid.NewV1()
    fmt.Printf("UUIDv1: %s\n", u1)
	u1, err = uuid.NewV4()
    fmt.Printf("UUIDv4: %s\n", u1)

    // 解析
    u2, err := uuid.FromString("f5394eef-e576-4709-9e4b-a7c231bd34a4")
    if err != nil {
        fmt.Printf("Something gone wrong: %s", err)
        return
    }
    fmt.Printf("Successfully parsed: %s", u2)
}
// 文件处理工具测试 拷贝、移动、
func Filetools_Test( ){
	_TestDir  := "E:\\Cache\\temp"
	_TestDir1 := "D:\\Cache\\temp"
	
	// 复制文件夹
	err := filetools.CopyDir(_TestDir, _TestDir+"1", false, true, func(count int, spath, dpath string, err error) error{
		fmt.Println("CopyDir: ", count, spath, dpath, err)
		return err
	})
	fmt.Println(err)
	// 移动文件夹
	err = filetools.MoveFile(_TestDir+"1", _TestDir+"2", false, true, func(count int, spath, dpath string, err error)error{
		fmt.Println("MoveFiles: ", spath, dpath, err)
		return err
	})
	fmt.Printf("%#v", filetools.IsError_DifferentDiskDrive(err) )
	fmt.Println(err)
	// 移动文件夹-跨分区
	err = filetools.MoveFileByCopying(_TestDir+"2", _TestDir1, true, true, func(count int, spath, dpath string, err error) error{
		fmt.Println("MoveDir: ", count, spath, dpath, err)
		return err
	})
	fmt.Println(err)
	// 中途取消拷贝
	err = filetools.CopyDir("D:\\Cache\\temp2", "D:\\Cache\\temp3", false, true, func(count int, spath, dpath string, err error) error{
		if count == 10 {
			return errors.New("取消操作")
		}
		fmt.Println("CopyDir: ", count, spath, dpath, err)
		return err
	})
	fmt.Println(err)
}
// 文字|路径处理测试
func Str_Test( ){
	arry := strings.Split("/AAA/BB", "/")
	fmt.Println(arry[0], arry[1], arry[2])
	fmt.Println(len(strings.Split("/AAA", "/")))
	fmt.Println(len(strings.Split("/AAA/BB", "/")))
	
	fmt.Println(filepath.Clean("C:\\./aa/bb /vvv\\ddd"))
	fmt.Println(filepath.IsAbs("C:\\windows"))
	fmt.Println(filepath.Abs("./datas"))
	fmt.Print("0123456"[0:5])
	fmt.Println(strings.Index("/Mt/vvv", "/Mt/"))
	fmt.Println(path.Clean("C.//A?/B/C\\D"))
}
// 数据库CRUD
func DB_Test( ){
	GModel.LoadModel( &dbmodel.DatabaseModel{} )
	var val GModel.Returns
//	val = GModel.Invoke("DatabaseModel", "DelTable", "testcon")
//	onErr(val, err)
	for i:=0; i<=10; i++{
		str := strconv.Itoa(i)
		data := bson.M{
			"path" : "/Test_"+str, 
			"md5" : "md5_1234567890_"+str, 
			"attr" : bson.M{ 
				"ctTime" : "1234567890", 
				"mdTime" : "2345678901", 
				"ctUser" : "admin", 
				"mdUser" : "User-"+str ,
			},
		}
		fmt.Println(data)
		val = GModel.Invoke("DatabaseModel", "Insert", "testcon", data)
		printVal(val)
	}
	val = GModel.Invoke("DatabaseModel", "Update", "testcon", bson.M{"path": "/Test_0"}, bson.M{"$set": bson.M{"path": "/Test"}})
	printVal(val)
	val = GModel.Invoke("DatabaseModel", "Query", "testcon", bson.M{"path": bson.M{"$exists": true}})
	printVal(val) 
	val = GModel.Invoke("DatabaseModel", "Delete", "testcon", bson.M{"path":"/Test_0"})
	printVal(val)
	val = GModel.Invoke("DatabaseModel", "DelTable", "testcon")
	printVal(val)
}
func printVal( val GModel.Returns ){
	fmt.Println("Type: ", val[0].Type( ).String( ))
	if !val[0].IsNil() {
		if val[0].Type( ).String( ) == "error" {
			panic( val[0].Interface( ).(error) )
		}else{
			fmt.Println(val[0])
		}
	}
}
// 配置模块测试
func CFG_Test( ){
	cf, ok := GModel.GetModel("ConfigModel")
	fmt.Println(cf, ok)
	fmt.Println( cf.(configmodel.ConfigModel) )
	
	fmt.Println(GModel.Invoke("ConfigModel", "GetConfig", "version"))
    fmt.Println(GModel.Invoke("ConfigModel", "GetConfig", "db.addr"))
    fmt.Println(GModel.Invoke("ConfigModel", "GetConfig", "modules.ConfigModel.ver"))
    
    fmt.Println(GModel.Invoke("ConfigModel", "SetConfig", "version", "1.1"))
	fmt.Println(GModel.Invoke("ConfigModel", "SetConfig", "db.addr", "localhost"))
    fmt.Println(GModel.Invoke("ConfigModel", "SetConfig", "modules.ConfigModel.ver", "1.1"))
    fmt.Println(GModel.Invoke("ConfigModel", "SetConfig", "modules.ConfigModel.time", "1999.12.12"))
}
// httpclienttools 测试
func Httpclienttools_Test(){
	fmt.Println(httpclienttools.Get("http://www.baidu.com", map[string]string{
		"ie":"UTF-8", "wd":"golang",
	}))
	fmt.Println(httpclienttools.BuildUrlsWithMap("http://www.baidu.com", map[string]string{
		"ie":"UTF-8", "wd":"golang",
	}))
	fmt.Println(httpclienttools.BuildUrlsWithArrays("http://www.baidu.com", [][]string{
		{"ie","UTF-8"}, {"wd","golang"},
	}))
	fmt.Println(httpclienttools.DoFormUrlEncoded("POST", "http://www.baidu.com", map[string]string{
		"ie":"UTF-8", "wd":"golang",
	}, map[string]string{
		"test":"UTF-8", "001":"golang",
	}))
	fmt.Println(httpclienttools.DoFormUrlEncoded("GET", "http://www.baidu.com", map[string]string{
		"ie":"UTF-8", "wd":"golang",
	}, map[string]string{
		"test":"UTF-8", "001":"golang",
	}))
	fmt.Println(httpclienttools.PostJson("http://www.baidu.com", url.Values{"num":{"456"},"num1":{"123"}}, 
			map[string]string{
		"test":"UTF-8", "001":"golang",
	}))
	fmt.Println(httpclienttools.PostJson("http://www.baidu.com", url.Values{"num":{"456"},"num1":{"123"}}, 
			map[string]string{
		"test":"UTF-8", "001":"golang",
	}))
	fmt.Println(httpclienttools.PostFile("http://www.baidu.com", "E:\\软件包\\eclipse-luna.zip"))

	go httpservertools.RegistService(":8080", map[string]httpservertools.HandlersFunc{
			"/heart": func(w http.ResponseWriter, req *http.Request){
			    w.Write([]byte("Hello"))
			},
	}, nil)
}

// 速度测试
func SayHolle_Test( ){
	GModel.LoadModel(&GModel.DemoModel{})
	rft_time :=int64( 0 )
    star_1 := time.Now().UnixNano()
	for i:=0;i<1000;i++{
		GModel.Invoke("DemoModel", "SayHole", "hole word!", 3)
	}
	rft_time = time.Now().UnixNano()-star_1
	
	star_1 = time.Now().UnixNano()
	temp := GModel.DemoModel{}
	for i:=0;i<1000;i++{
		temp.SayHole("hole word!", 3)
	}
	fmt.Print(time.Now().UnixNano()-star_1, rft_time)
}